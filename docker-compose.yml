services:
  # ----------------------------------------
  # Airflow Metadb (Postgres)
  # ----------------------------------------
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  # ----------------------------------------
  # Airflow Services
  # ----------------------------------------
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-webserver
    restart: always
    logging:
      driver: "json-file"
    depends_on:
      - postgres
      - kafka  # DependÃªncia para comunicaÃ§Ã£o
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      &airflow_env
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - _AIRFLOW_WWW_USER_CREATE=False
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_FIRSTNAME=Airflow
      - _AIRFLOW_WWW_USER_LASTNAME=Admin
      - _AIRFLOW_WWW_USER_EMAIL=admin@example.com
      - _AIRFLOW_WWW_USER_ROLE=Admin
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 # Acesso ao Kafka
    volumes:
      - ./src/dags:/opt/airflow/dags   # Mapeia a pasta de DAGs
      - ./src:/app/src                # Mapeia o cÃ³digo da aplicaÃ§Ã£o
      - airflow_logs:/opt/airflow/logs # Mapeia os logs do Airflow
      - /var/run/docker.sock:/var/run/docker.sock  # Permite controlar os containers
      - ./.env:/opt/airflow/.env      # Mapeia o arquivo .env
    command: ["airflow", "webserver"]
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-scheduler
    restart: always
    logging:
      driver: "json-file"
    depends_on:
      - postgres
      - airflow-webserver
    env_file:
      - .env
    environment: *airflow_env
    volumes:
      - ./src/dags:/opt/airflow/dags
      - ./src:/app/src
      - airflow_logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.env:/opt/airflow/.env
    command: ["airflow", "scheduler"]
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  mongodb:
    image: mongo:6.0
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DB:-tripsdb}

  producer:
    build:
      context: .
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - MONGO_URI=${MONGO_URI}
      - MONGO_DB=${MONGO_DB}
      - MONGO_COLLECTION=${MONGO_COLLECTION}
    volumes:
      - ./src:/app
  consumer:
    build:
      context: .
    depends_on:
      - kafka
      - mongodb
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - MONGO_URI=${MONGO_URI}
      - MONGO_DB=${MONGO_DB}
      - MONGO_COLLECTION=${MONGO_COLLECTION}
    volumes:
      - ./src:/app
  dashboard:
    build:
      context: .
    command: streamlit run dashboard.py --server.port=8501 --server.address=0.0.0.0
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - MONGO_URI=${MONGO_URI}
      - MONGO_DB=${MONGO_DB}
      - MONGO_COLLECTION=${MONGO_COLLECTION}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_GENERATION_MODEL=${GEMINI_GENERATION_MODEL}
    depends_on:
      - mongodb
    env_file:
      - .env
  api:
    build:
      context: .
    command: python api.py
    ports:
      - "5001:5001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Permite controlar os containers
      - ./src:/app
    environment:
      - DOCKER_BUILDKIT=1
      - MONGO_URI=${MONGO_URI}
      - MONGO_DB=${MONGO_DB}
      - MONGO_COLLECTION=${MONGO_COLLECTION}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_GENERATION_MODEL=${GEMINI_GENERATION_MODEL}
    depends_on:
      - mongodb
  
  etl:
    build:
      context: .
      dockerfile: Dockerfile.etl
    image: real-time-project-etl:latest
    container_name: etl_trips
    networks:
      - default
    volumes:
      - ./data:/data   # ðŸ‘ˆ salva silver/gold no host
      - ./src:/app/src # ðŸ‘ˆ mapeia o cÃ³digo da aplicaÃ§Ã£o
      - ./.env:/app/.env # ðŸ‘ˆ mapeia o arquivo .env

    depends_on:
      - mongodb
      - postgres


volumes:
  mongodb_data:
  postgres_data:
  airflow_logs: